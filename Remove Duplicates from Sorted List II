# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # If the list is empty or has only one node, no duplicates are possible
        if head is None or head.next is None:
            return head

        # Initialize a pointer to traverse the list
        curr = head

        # Traverse until the end of the list
        while curr and curr.next:
            if curr.val == curr.next.val:
                # If current and next node values are the same, skip the next node
                curr.next = curr.next.next
            else:
                # Otherwise, move to the next node
                curr = curr.next

        # Return the modified list
        return head
