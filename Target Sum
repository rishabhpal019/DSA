from typing import List

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        # Dictionary to memoize intermediate results: dp[(i, total)] = number of ways
        dp = {}

        # Recursive function to explore both + and - assignments for each number
        def backtrack(i, total):
            # Base case: if we've gone through all elements
            if i == len(nums):
                # If the total sum equals the target, we found one valid way
                return 1 if total == target else 0

            # Check if this subproblem has already been solved
            if (i, total) in dp:
                return dp[(i, total)]

            # Explore both adding and subtracting the current number
            add = backtrack(i + 1, total + nums[i])     # choose '+'
            subtract = backtrack(i + 1, total - nums[i])  # choose '-'

            # Store the result in dp and return the total ways
            dp[(i, total)] = add + subtract
            return dp[(i, total)]

        # Start recursion from index 0 with total sum 0
        return backtrack(0, 0)
